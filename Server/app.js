
/* IMPORTS */

// Library imports
var express = require('express');
var path = require('path');
var favicon = require('serve-favicon');
var logger = require('morgan');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var mongoose = require('mongoose');

// Routes
var index = require('./routes/index');

// Params
var ALLOWED_ORIGIN = "localhost*";
var BASE_URL = "/api/";
var MONGO_URL = '127.0.0.1:27017';

// Express init
var app = express();

/* SETUP DATABASE USAGE */

// Connect to MongoDB
mongoose.Promise = global.Promise;
mongoose.connect('mongodb://' + MONGO_URL + '/CleanIT')
  .then(() =>  console.log('Database connection succesful'))
  .catch((err) => console.error(err));

/* SETUP SERVER SETTINGS */
app.use(function(req, res, next) {
  res.header("Access-Control-Allow-Origin", ALLOWED_ORIGIN);
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
});

/* SETUP ROUTES */
var devices = require('./services/devices');

app.use('/', index);
app.use(BASE_URL + 'devices', devices);

/* ERROR HANDLING */

// Catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});

app.use(function(err, req, res, next) {
  // Locals are providing errors for development purpose only
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // Render the error page
  res.status(err.status || 500);
  res.render('error');
});



/*** AUTOGENERATED START ***/

/* SETUP JADE ENGINE */
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

// TODO: Uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

/*** AUTOGENERATED END ***/

module.exports = app;

